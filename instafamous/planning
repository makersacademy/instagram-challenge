Domain Model

Users
- attributes >> name, password, email
- relations >> have many pictures

Pictures
- attributes >> images, captions,
- relations >> have many comments

Comments
- attribues >> description
- relations >> belongs to picture, belongs to user

Likes
- attributes >> counter (ala endorsements)
- relations >> belongs to picture


Use Cases

As a user,
So that I can see other pictures in the network,
I want to see a list of all pictures on the homepage (DONE)

As a user,
So that I can add pictures to the site,
I want to be able to upload pictures to the homepage (DONE)

As a user,
So that I can see what other people are saying about pictures,
I want to click on a icon to reveal a list of all comments on each picture (DONE)

As a user,
So that I can make sure I only add my own pictures,
I want to be able to login to the website (DONE)

As a user,
So that I can comment with others
I want to be able to leave comments on pictures from the homepage (DONE)

As a user,
So that no one makes comments as me,
I only want to be able to leave comments when logged in (DONE)

As a user,
So that I can like my favourite pictures,
I want a like button on each picture (DONE)

As a user,
So that I can dislike pictures,
I want a dislike button on each picture

As an admin,
So people actually visit my site,
I want to make it look as much like existing popular competitors as possible...(buttons, headers etc) (DONE)

Steps

- Rails generate structure (with postgres)
- Set-up database + rspec
- Set-up test folder/ files
- Write first feature test for pictures
- Rails generate Pictures model, controller
- After first test pass/ showing, deploy to Heroku >> deploy early and often (switch over app)

Left-to-do
- Apply some basic user auth/ tests
- Sort button duplicity action on likes, and comments
- Try and have comment form on same page (if simple, do for photos too)
- Try and sort dislike button


Potential Blockers

